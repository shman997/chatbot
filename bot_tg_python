import telebot
import random
import sqlite3
from telebot import types

bot = telebot.TeleBot('6431978284:AAF1Ys8yvESN18wUz2964x0bJ9v6wR7BYlE')
@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('MathBot.sql')
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, pass TEXT, true INTEGER DEFAULT 0, false INTEGER DEFAULT 0)')
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, 'Привет! Этот бот поможет тебе лучше разобраться в математике')
    bot.send_message(message.chat.id, 'Введите ваше имя чтобы войти или зарегистрироваться')
    bot.register_next_step_handler(message, authenticate_user)

def authenticate_user(message):
    global user_id
    user_id = message.from_user.id
    conn = sqlite3.connect('MathBot.sql')
    cur = conn.cursor()
    name = message.text.strip()
    cur.execute("SELECT * FROM users WHERE name=?", (name,))
    user_data = cur.fetchone()
    if user_data is None:
        bot.send_message(message.chat.id, 'Пользователь не найден. Введите пароль для регистрации')
        bot.register_next_step_handler(message, register_user, name)
    else:
        bot.send_message(message.chat.id, 'Введите пароль')
        bot.register_next_step_handler(message, login_user, user_data)
    cur.close()
    conn.close()

def register_user(message, name):
    password = message.text.strip()
    conn = sqlite3.connect('MathBot.sql')
    cur = conn.cursor()
    cur.execute("INSERT INTO users (name, pass) VALUES (?, ?)", (name, password))
    conn.commit()
    cur.execute("SELECT id FROM users WHERE name=?", (name,))
    user_id = cur.fetchone()[0]
    bot.send_message(message.chat.id, 'Пользователь зарегистрирован!')
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, 'Авторизуйтесь. Введите ваше имя')
    bot.register_next_step_handler(message, authenticate_user)

def login_user(message, user_data):
    global user_id
    password = message.text.strip()
    if user_data[2] == password:
        user_id = user_data[0]
        bot.send_message(message.chat.id, f'Добро пожаловать, {user_data[1]}!')
        main(message)
    else:
        bot.send_message(message.chat.id, 'Неверный пароль. Попробуйте еще раз')
        bot.send_message(message.chat.id, 'Введите имя пользователя')
        bot.register_next_step_handler(message, authenticate_user)

def main(message):
    markup = types.ReplyKeyboardMarkup()
    btn_start = types.KeyboardButton('/start')
    btn_plus = types.KeyboardButton('Примеры на сложение')
    btn_minus = types.KeyboardButton('Примеры на вычитание')
    btn_multi = types.KeyboardButton('Примеры на умножение')
    btn_division = types.KeyboardButton('Примеры на деление')
    btn_combo = types.KeyboardButton('Комбинированные примеры')
    btn_change_account = types.KeyboardButton('Сменить аккаунт')
    btn_view_stats = types.KeyboardButton('Посмотреть статистику')
    markup.add(btn_start)
    markup.add(btn_plus, btn_minus, btn_multi, btn_division, btn_combo)
    markup.add(btn_change_account, btn_view_stats)
    bot.send_message(message.chat.id, 'Выбери тип примеров или действие', reply_markup=markup)
    bot.register_next_step_handler(message, on_click)

def main2(message):
    bot.send_message(message.chat.id, 'Какие примеры вы хотите решать дальше?')
    bot.register_next_step_handler(message, on_click)

def on_click(message):
    if message.text == 'Примеры на сложение':
        summ = []
        answers = []
        for i in range(1, 11):
            x = random.randint(5, 100)
            y = random.randint(5, 100)
            sum = x + y
            summ.append(f"{i}) {x} + {y} = ")
            answers.append(sum)
        for n in summ:
            bot.send_message(message.chat.id, n)
        bot.send_message(message.chat.id,
        'Напиши ответы на каждое из выражений одним сообщением через пробел, не указывая номер примера (вам нужно ввести ответы на все данные примеры)')
        bot.register_next_step_handler(message, check_answers, answers, summ)
    elif message.text == 'Примеры на вычитание':
        summ = []
        answers = []
        for i in range(1, 11):
            x = random.randint(5, 100)
            y = random.randint(5, 100)
            while x - y < 0:
                x = random.randint(5, 100)
                y = random.randint(5, 100)
            sum = x - y
            summ.append(f'{i}) {x} – {y} = ')
            answers.append(sum)
        for n in summ:
            bot.send_message(message.chat.id, n)
        bot.send_message(message.chat.id,
                         'Напиши ответы на каждое из выражений одним сообщением через пробел, не указывая номер примера (вам нужно ввести ответы на все данные примеры)')
        bot.register_next_step_handler(message, check_answers, answers, summ)

    elif message.text == 'Примеры на умножение':
        summ = []
        answers = []
        for i in range(1, 11):
            x = random.randint(2, 10)
            y = random.randint(2, 10)
            sum = x * y
            summ.append(f'{i}) {x} * {y} = ')
            answers.append(sum)
        for n in summ:
            bot.send_message(message.chat.id, n)
        bot.send_message(message.chat.id,
                         'Напиши ответы на каждое из выражений одним сообщением через пробел, не указывая номер примера (вам нужно ввести ответы на все данные примеры)')
        bot.register_next_step_handler(message, check_answers, answers, summ)
    elif message.text == 'Примеры на деление':
        summ = []
        answers = []
        for i in range(1, 11):
            x = random.randint(10, 50)
            y = random.randint(2, 50)
            while x % y != 0 or x == y:
                x = random.randint(10, 50)
                y = random.randint(2, 50)
            sum = x / y
            summ.append(f'{i}) {x} / {y} = ')
            answers.append(sum)
        for n in summ:
            bot.send_message(message.chat.id, n)
        bot.send_message(message.chat.id, 'Напиши ответы на каждое из выражений одним сообщением через пробел, не указывая номер примера (вам нужно ввести ответы на все данные примеры)')
        bot.register_next_step_handler(message, check_answers, answers, summ)
    elif message.text == 'Комбинированные примеры':
        summ = []
        answers = []
        for i in range(1, 11):
            operation = random.choice(['+', '-', '*', '/'])
            if operation == '+':
                x = random.randint(5, 100)
                y = random.randint(5, 100)
                sum = x + y
            elif operation == '-':
                x = random.randint(5, 100)
                y = random.randint(5, 100)
                while x - y < 0:
                    x = random.randint(5, 100)
                    y = random.randint(5, 100)
                sum = x - y
            elif operation == '*':
                x = random.randint(1, 10)
                y = random.randint(1, 10)
                sum = x * y
            else:
                for i in range(1, 11):
                    x = random.randint(10, 50)
                    y = random.randint(2, 50)
                    while x % y != 0 or x == y:
                        x = random.randint(10, 50)
                        y = random.randint(2, 50)
                sum = x / y
            summ.append(f"{i}) {x} {operation} {y} = ")
            answers.append(sum)
        for n in summ:
            bot.send_message(message.chat.id, n)
        bot.send_message(message.chat.id,
                         'Напиши ответы на каждое из выражений одним сообщением через пробел, не указывая номер примера (вам нужно ввести ответы на все данные примеры)')
        bot.register_next_step_handler(message, check_answers, answers, summ)
    elif message.text == 'Сменить аккаунт':
        bot.send_message(message.chat.id, 'Введите ваше имя для смены аккаунта')
        bot.register_next_step_handler(message, authenticate_user)
    elif message.text == 'Посмотреть статистику':
        view_stats(message)

def view_stats(message):
    conn = sqlite3.connect('MathBot.sql')
    cur = conn.cursor()
    cur.execute("SELECT true, false FROM users WHERE id=?", (user_id,))
    user_stats = cur.fetchone()
    cur.close()
    conn.close()
    if user_stats is not None:
        total_correct = user_stats[0]
        total_incorrect = user_stats[1]
        bot.send_message(message.chat.id, f'Общее количество правильных ответов: {total_correct}')
        bot.send_message(message.chat.id, f'Общее количество неправильных ответов: {total_incorrect}')
        main2(message)
    else:
        bot.send_message(message.chat.id, 'Статистика не доступна')
        main2(message)

def check_answers(message, answers, summ):
    count_true = 0
    count_false = 0
    user_answers = message.text.split()
    if len(user_answers) != 10:
        bot.send_message(message.chat.id,
                         'Вы либо ответили не на все примеры, либо написали слишком много ответов, напишите ответы заново')
        bot.register_next_step_handler(message, check_answers, answers, summ)
        return
    for n in range(10):
        if int(answers[n]) != int(user_answers[n]):
            summ[n] = f'{summ[n]} {user_answers[n]} ❌'
            count_false += 1
        else:
            summ[n] = f'{summ[n]} {user_answers[n]} ✅'
            count_true += 1
    for n in summ:
        bot.send_message(message.chat.id, n)
    bot.send_message(message.chat.id, f'Правильных ответов: {count_true}')
    bot.send_message(message.chat.id, f'Неправильных ответов: {count_false}')

    conn = sqlite3.connect('MathBot.sql')
    cur = conn.cursor()
    cur.execute("UPDATE users SET true = true + ?, false = false + ? WHERE id = ?", (count_true, count_false, user_id))
    conn.commit()
    cur.close()
    conn.close()
    main2(message)
bot.polling(none_stop=True)
